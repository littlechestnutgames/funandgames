{
    "format_version": "1.16.100",
    "minecraft:entity": {
        "description": {
            "identifier": "glc:chessmen",
            "is_summonable": true,
            "animations": {
                "controller_bp": "controller.animation.chessmen.game_bp"
              },
      
              "scripts": {
                "pre_animation": [
                  "variable.is_selected = (query.mark_variant > 1);"
                ],
                "animate": [
                  "controller_bp"
                ]
              }
        },
        "components": {
            // We don't want the piece to fall down or prevent someone from moving through them.
            "minecraft:physics": {
                "has_collision": false,
                "has_gravity": false
            },

            "minecraft:health": {
                "value": 1,
                "max": 1
            },

            // It's very easy to punch entities on mobile. We're filtering that out. /kill still functions.
            "minecraft:damage_sensor": {
                "triggers": {
                    "on_damage": {
                        "filters": {
                            "test": "is_family",
                            "subject": "other",
                            "operator": "!=",
                            "value": "chessmen"
                        }
                    },
                    "deals_damage": false
                }
            },

            // Don't allow the piece to be pushed. It's probably already aligned to a grid.
            "minecraft:pushable": {
                "is_pushable": false,
                "is_pushable_by_piston": false
            },
            "minecraft:conditional_bandwidth_optimization": {}
        },
        "component_groups": {
            // Piece types.
            "pawn": {
                "minecraft:variant": {"value": 0},
                "minecraft:type_family": { "family": [ "game_piece", "chessmen", "pawn"] },
                "minecraft:collision_box": {
                    "width": 0.5,
                    "height": 0.5
                }
            },
            "rook": {
                "minecraft:variant": {"value": 1},
                "minecraft:type_family": { "family": [ "game_piece", "chessmen", "rook"] },
                "minecraft:collision_box": {
                    "width": 0.5,
                    "height": 1
                }
            },
            "knight": {
                "minecraft:variant": {"value": 2},
                "minecraft:type_family": { "family": [ "game_piece", "chessmen", "knight"] },
                "minecraft:collision_box": {
                    "width": 0.5,
                    "height": 0.75
                }
            },
            "bishop": {
                "minecraft:variant": {"value": 3},
                "minecraft:type_family": { "family": [ "game_piece", "chessmen", "bishop"] },
                "minecraft:collision_box": {
                    "width": 0.5,
                    "height": 1
                }
            },
            "queen": {
                "minecraft:variant": {"value": 4},
                "minecraft:type_family": { "family": [ "game_piece", "chessmen", "queen"] },
                "minecraft:collision_box": {
                    "width": 0.5,
                    "height": 1
                }
            },
            "king": {
                "minecraft:variant": {"value": 5},
                "minecraft:type_family": { "family": [ "game_piece", "chessmen", "king"] },
                "minecraft:collision_box": {
                    "width": 0.5,
                    "height": 1
                }
            },

            // Piece selection interactions.

            // These two's events turn an deselected piece into a selected piece.
            "white": {
                "minecraft:interact": {
                    "interactions": [
                        {
                            "interact_text": "Select",
                            "on_interact": { "event": "select" }
                        }
                    ]
                },
                "minecraft:mark_variant": { "value": 0 }
            },
            "black": {
                "minecraft:interact": {
                    "interactions": [
                        {
                            "interact_text": "Select",
                            "on_interact": { "event": "select" }
                        }
                    ]
                },
                "minecraft:mark_variant": { "value": 1 }
            },

            // These two turn an selected piece into a deselected piece.
            "selected_white": {
                "minecraft:interact": {
                    "interactions": [
                        {
                            "interact_text": "Deselect",
                            "on_interact": { "event": "deselect" }
                        }
                    ]
                },
                "minecraft:mark_variant": { "value": 2 }
            },
            "selected_black": {
                "minecraft:interact": {
                    "interactions": [
                        {
                            "interact_text": "Deselect",
                            "on_interact": { "event": "deselect" }
                        }
                    ]
                },
                "minecraft:mark_variant": { "value": 3}
            },

            // Cardinal direction representations.
            "north": {
                "minecraft:default_look_angle": {"value": 0}
            },
            "south": {
                "minecraft:default_look_angle": {"value": 180},
                "minecraft:trusting": {},
                "minecraft:genetics": {}
            },
            "east": {
                "minecraft:default_look_angle": {"value": -90},
                "minecraft:trusting": {}
            },
            "west": {
                "minecraft:default_look_angle": {"value": 90},
                "minecraft:genetics": {}
            },

            // This keeps track of if the piece has moved or not, relevant for castling and pawn's initial move.
            "moved_piece": {
                "minecraft:giveable": {}
            },

            // When added, despawns this entity.
            "despawn": {
                "minecraft:despawn": {
                    "filters": {"test": "is_visible", "value": true}
                }
            },

            // The rook was originally positioned on the left side of the board. Relevant for castling position information.
            "left_rook": {
                "minecraft:skin_id": {"value": 0},
                "minecraft:type_family": { "family": [ "game_piece", "chessmen", "rook", "left"] }
            },

            // The rook was originally positioned on the left side of the board. Relevant for castling position information.
            "right_rook": {
                "minecraft:skin_id": {"value": 1},
                "minecraft:type_family": { "family": [ "game_piece", "chessmen", "rook", "right"] }
            },

            // These are indicators only used by the king. When a rook moves, it lets the king know, so it's not counted for castling.
            "left_rook_moved": {
                "minecraft:can_climb": {}
            },
            "right_rook_moved": {
                "minecraft:can_power_jump": {}
            },

            "show_marker_timer": {
                "minecraft:timer": {
                    "looping": false,
                    "time": 0.125,
                    "time_down_event": {"event": "show_squares"}
                }
            }
        },
        "events": {            
            "force_despawn": {
                "add": { "component_groups": ["despawn"] }
            },

            // Summon events for black pieces. These are oriented north.
            "make_black_pawn": {"add": { "component_groups": [ "pawn", "black", "north" ] } },
            "make_black_rook": { "add": { "component_groups": [ "rook", "black", "north" ] } },
            "make_black_left_rook": { "add": { "component_groups": [ "rook", "black", "north", "left_rook" ] } },
            "make_black_right_rook": { "add": { "component_groups": [ "rook", "black", "north", "right_rook" ] } },
            "make_black_knight": {"add": { "component_groups": [ "knight", "black", "north" ] } },
            "make_black_bishop": { "add": { "component_groups": [ "bishop", "black", "north" ] } },
            "make_black_queen": { "add": { "component_groups": [ "queen", "black", "north" ] } },
            "make_black_king": { "add": { "component_groups": [ "king", "black", "north" ] } },

            // Summon events for white pieces. These are oriented north.
            "make_white_pawn": { "add": { "component_groups": [ "pawn", "white", "north" ] } },
            "make_white_left_rook": { "add": { "component_groups": [ "rook", "white", "north", "left_rook" ] } },
            "make_white_right_rook": { "add": { "component_groups": [ "rook", "white", "north", "right_rook" ] } },
            "make_white_knight": { "add": { "component_groups": [ "knight", "white", "north" ] } },
            "make_white_bishop": { "add": { "component_groups": [ "bishop", "white", "north" ] } },
            "make_white_queen": { "add": { "component_groups": [ "queen", "white", "north" ] } },
            "make_white_king": { "add": { "component_groups": [ "king", "white", "north" ] } },

            // Summon events for black pieces. These are oriented south.
            "make_black_pawn_south": {"add": { "component_groups": [ "pawn", "black", "south" ] } },
            "make_black_left_rook_south": { "add": { "component_groups": [ "rook", "black", "south", "left_rook" ] } },
            "make_black_right_rook_south": { "add": { "component_groups": [ "rook", "black", "south", "right_rook" ] } },
            "make_black_knight_south": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 180"}},
                    {"add": { "component_groups": [ "knight", "black", "south" ] }}
                ]
            },
            "make_black_bishop_south": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 180"}},
                    {"add": { "component_groups": [ "bishop", "black", "south" ] }}
                 ]
            },
            "make_black_queen_south": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 180"}},
                    {"add": { "component_groups": [ "queen", "black", "south" ] }}
                ]
            },
            "make_black_king_south": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 180"}},
                    {"add": { "component_groups": [ "king", "black", "south" ] }}
                 ]
            },
            
            // Summon events for white pieces. These are oriented south.
            "make_white_pawn_south": { "add": { "component_groups": [ "pawn", "white", "south" ] } },
            "make_white_left_rook_south": { "add": { "component_groups": [ "rook", "white", "south", "left_rook" ] } },
            "make_white_right_rook_south": { "add": { "component_groups": [ "rook", "white", "south", "right_rook" ] } },
            "make_white_knight_south": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 180"}},
                    {"add": { "component_groups": [ "knight", "white", "south" ] }}
                ]
            },
            "make_white_bishop_south": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 180"}},
                    {"add": { "component_groups": [ "bishop", "white", "south" ] }}
                 ]
            },
            "make_white_queen_south": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 180"}},
                    {"add": { "component_groups": [ "queen", "white", "south" ] }}
                ]
            },
            "make_white_king_south": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 180"}},
                    {"add": { "component_groups": [ "king", "white", "south" ] }}
                 ]
            },

            // Summon events for black pieces. These are oriented east.
            "make_black_pawn_east": {"add": { "component_groups": [ "pawn", "black", "east" ] } },
            "make_black_left_rook_east": { "add": { "component_groups": [ "rook", "black", "east", "left_rook" ] } },
            "make_black_right_rook_east": { "add": { "component_groups": [ "rook", "black", "east", "right_rook" ] } },
            "make_black_knight_east": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 90"}},
                    {"add": { "component_groups": [ "knight", "black", "east" ] }}
                ]
            },
            "make_black_bishop_east": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 90"}},
                    {"add": { "component_groups": [ "bishop", "black", "east" ] }}
                 ]
            },
            "make_black_queen_east": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 90"}},
                    {"add": { "component_groups": [ "queen", "black", "east" ] }}
                 ]
            },
            "make_black_king_east": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 90"}},
                    {"add": { "component_groups": [ "king", "black", "east" ] }}
                ]
            },

            // Summon events for white pieces. These are oriented east.
            "make_white_pawn_east": { "add": { "component_groups": [ "pawn", "white", "east" ] } },
            "make_white_left_rook_east": { "add": { "component_groups": [ "rook", "white", "east", "left_rook" ] } },
            "make_white_right_rook_east": { "add": { "component_groups": [ "rook", "white", "east", "right_rook" ] } },
            "make_white_knight_east": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 90"}},
                    {"add": { "component_groups": [ "knight", "white", "east" ] }}
                 ]
            },
            "make_white_bishop_east": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 90"}},
                    {"add": { "component_groups": [ "bishop", "white", "east" ] }}
                 ]
            },
            "make_white_queen_east": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 90"}},
                    {"add": { "component_groups": [ "queen", "white", "east" ] }}
                ]
            },
            "make_white_king_east": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ 90"}},
                    {"add": { "component_groups": [ "king", "white", "east" ] }}
                 ]
            },

            // Summoning events for black pieces. These are oriented west.
            "make_black_pawn_west": {"add": { "component_groups": [ "pawn", "black", "west" ] } },
            "make_black_left_rook_west": { "add": { "component_groups": [ "rook", "black", "west", "left_rook" ] } },
            "make_black_right_rook_west": { "add": { "component_groups": [ "rook", "black", "west", "right_rook" ] } },
            "make_black_knight_west": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ -90"}},
                    {"add": { "component_groups": [ "knight", "black", "west" ] } }
                ]
            },
            "make_black_bishop_west": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ -90"}},
                    {"add": { "component_groups": [ "bishop", "black", "west" ] }}
                ]
            },
            "make_black_queen_west": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ -90"}},
                    {"add": { "component_groups": [ "queen", "black", "west" ] }}
                 ]
            },
            "make_black_king_west": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ -90"}},
                    {"add": { "component_groups": [ "king", "black", "west" ] }}
                 ]
            },

            // Summoning events for white pieces. These are oriented west.
            "make_white_pawn_west": { "add": { "component_groups": [ "pawn", "white", "west" ] } },
            "make_white_left_rook_west": { "add": { "component_groups": [ "rook", "white", "west", "left_rook" ] } },
            "make_white_right_rook_west": { "add": { "component_groups": [ "rook", "white", "west", "right_rook" ] } },
            "make_white_knight_west": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ -90"}},
                    {"add": { "component_groups": [ "knight", "white", "west" ] }}
                 ]
            },
            "make_white_bishop_west": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ -90"}},
                    {"add": { "component_groups": [ "bishop", "white", "west" ] }}
                 ]
            },
            "make_white_queen_west": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ -90"}},
                    {"add": { "component_groups": [ "queen", "white", "west" ] }}
                 ]
            },
            "make_white_king_west": {
                "sequence": [
                    {"run_command": {"command": "tp @s ~ ~ ~ -90"}},
                    {"add": { "component_groups": [ "king", "white", "west" ] }}
                 ]
            },

            // When the white left rook moves, the king hears about it and remembers that.
            "moved_white_left_rook": {
                "filters": {
                    "all_of": [
                        {"test":"is_family", "value": "king"},
                        {"any_of": [
                            {"test":"is_mark_variant", "value": 0},
                            {"test":"is_mark_variant", "value": 2}
                        ]}
                    ]
                },
                "add": {
                    "component_groups": [ "moved_left_rook" ]
                }
            },

            // When the white right rook moves, the king hears about it and remembers that.
            "moved_white_right_rook": {
                "filters": {
                    "all_of": [
                        {"test":"is_family", "value": "king"},
                        {"any_of": [
                            {"test":"is_mark_variant", "value": 0},
                            {"test":"is_mark_variant", "value": 2}
                        ]}
                    ]
                },
                "add": {
                    "component_groups": [ "moved_right_rook" ]
                }
            },

            // When the black left rook moves, the king hears about it and remembers that.
            "moved_black_left_rook": {
                "filters": {
                    "all_of": [
                        {"test":"is_family", "value": "king"},
                        {"any_of": [
                            {"test":"is_mark_variant", "value": 1},
                            {"test":"is_mark_variant", "value": 3}
                        ]}
                    ]
                },
                "add": {
                    "component_groups": [ "left_rook_moved" ]
                }
            },

            // When the black left rook moves, the king hears about it and remembers that.
            "moved_black_right_rook": {
                "filters": {
                    "all_of": [
                        {"test":"is_family", "value": "king"},
                        {"any_of": [
                            {"test":"is_mark_variant", "value": 1},
                            {"test":"is_mark_variant", "value": 3}
                        ]}
                    ]
                },
                "add": {
                    "component_groups": [ "right_rook_moved" ]
                }
            },

            // This event is fired by the square entity on interact. It lets the piece know to finish moving.
            "moved": {
                "sequence": [
                    // Kill the piece it landed on.
                    {"run_command": {"command": "kill @e[type=glc:chessmen,r=0,tag=!selected]"}},

                    // If this is a white left rook, tell the king in an event that it moved.
                    {
                        "filters":
                            {
                                "all_of": [
                                    {"test":"is_family","value": "rook"},
                                    {"test":"is_family","value": "left"},
                                    {"any_of": [
                                        {"test": "is_mark_variant", "value": 0},
                                        {"test": "is_mark_variant", "value": 2}
                                    ]},
                                    {"test":"has_component","operator": "!=","value": "minecraft:giveable"}
                                ]
                            },
                            "run_command": {
                                "command": "event entity @e[type=glc:chessmen,family=king,r=32] moved_white_left_rook"
                            }
                    },

                    // If this is a white right rook, tell the king in an event that it moved.
                    {
                        "filters": {
                            "all_of": [
                                {"test":"is_family","value": "rook"},
                                {"test":"is_family","value": "right"},
                                {"any_of": [
                                    {"test": "is_mark_variant", "value": 0},
                                    {"test": "is_mark_variant", "value": 2}
                                ]},
                                {"test":"has_component","operator": "!=","value": "minecraft:giveable"}
                            ]
                        },
                        "run_command": {
                            "command": "event entity @e[type=glc:chessmen,family=king,r=32] moved_white_right_rook"
                        }
                    },

                    // If this is a black left rook, tell the king in an event that it moved.
                    {
                        "filters":
                            {
                                "all_of": [
                                    {"test":"is_family","value": "rook"},
                                    {"test":"is_family","value": "left"},
                                    {"any_of": [
                                        {"test": "is_mark_variant", "value": 1},
                                        {"test": "is_mark_variant", "value": 3}
                                    ]},
                                    {"test":"has_component","operator": "!=","value": "minecraft:giveable"}
                                ]
                            },
                            "run_command": {
                                "command": "event entity @e[type=glc:chessmen,family=king,r=32] moved_black_left_rook"
                            }
                    },

                    // If this is a black right rook, tell the king in an event that it moved.
                    {
                        "filters":
                            {
                                "all_of": [
                                    {"test":"is_family","value": "rook"},
                                    {"test":"is_family","value": "right"},
                                    {"any_of": [
                                        {"test": "is_mark_variant", "value": 1},
                                        {"test": "is_mark_variant", "value": 3}
                                    ]},
                                    {"test":"has_component","operator": "!=","value": "minecraft:giveable"}
                                ]
                            },
                            "run_command": {
                                "command": "event entity @e[type=glc:chessmen,family=king,r=32] moved_black_right_rook"
                            }
                    },

                    // Deselect the entity and mark that this piece has moved since the beginning of the game.
                    {"run_command": {"command": "event entity @s deselect"}},
                    {
                        "filters": {"test":"has_component", "operator": "!=", "value": "minecraft:giveable"},
                        "add": {
                            "component_groups": [ "moved_piece" ]
                        }
                    }
                ]
            },

            // Emitted by white selected pieces. Removes attack squares from underneath pieces that are the same color as the selected piece.
            "remove_markers_under_white": {
                "filters": {"test":"is_mark_variant","subject": "self", "value": 0},
                "sequence": [
                    {
                        "filters": {"test": "is_mark_variant", "subject": "self", "value": 0},
                        "run_command": {
                            "command": "event entity @e[type=glc:square,r=0] force_despawn"
                        }
                    }
                ]
            },

            // Emitted by black selected pieces. Removes attack squares from underneath pieces that are the same color as the selected piece.
            "remove_markers_under_black": {
                "filters": {"test":"is_mark_variant","subject": "self", "value": 1},
                "sequence": [
                    {
                        "filters": {"test":"is_mark_variant","subject": "self", "value": 1},
                        "run_command": {
                            "command": "event entity @e[type=glc:square,r=0] force_despawn"
                        }
                    }
                ]
            },

            "remove_markers": {
                "sequence": [
                    {
                        "filters": {"test": "is_mark_variant", "value": 0},
                        "run_command": { "command": "event entity @e[type=glc:chessmen,r=32] remove_markers_under_white" }
                    },
                    {
                        "filters": {"test": "is_mark_variant", "value": 1},
                        "run_command": { "command": "event entity @e[type=glc:chessmen,r=32] remove_markers_under_black" }
                    },
                    {"add": {"component_groups": ["show_marker_timer"]}}
                ]
            },

            "show_squares": {
                "run_command": { "command": "event entity @e[type=glc:square,r=32] show" }
            },
            // This is the rook's movement pattern. It is also reused by the queen.
            // This draws 7 squares in the 4 cardinal directions, then erases squares that are not valid.
            "trace_plus": {
                "sequence": [
                    {
                        "run_command": {"command": "function chess_trace_plus"}
                    }
                ]
            },

            // This is the bishop's movement pattern. It is also reused by the queen.
            // This draws 7 squares in the 4 intermediate directions, then erases squares that are not valid.
            "trace_cross": {
                "sequence": [
                    {
                        "run_command": { "command": "function chess_trace_cross"}
                    }
                ]
            },

            // This clips away all the squares that lay out of bounds of the board.
            "clip_board": {
                "run_command": {"command": "event entity @e[type=glc:border,r=8] clip_board"}
            },

            "deselect": {
                "sequence": [
                    // Deselect this piece.
                    {
                        "run_command": {
                            "command": "tag @s remove selected"
                        }
                    },

                    // Force the move/attack squares to despawn.
                    {
                        "run_command": {
                            "command": "event entity @e[type=glc:square,r=32] force_despawn"
                        }
                    },

                    // If the selected piece was selected_white, change it back to white.
                    {
                        "filters": [{"test": "is_mark_variant", "value": 2}],
                        "remove": {"component_groups": ["selected_white"]},
                        "add": {"component_groups": [ "white" ]}
                    },

                    // If the selected piece was selected_black, change it back to black.
                    {
                        "filters": [{"test": "is_mark_variant", "value": 3}],
                        "remove": {"component_groups": ["selected_black"]},
                        "add": {"component_groups": [ "black" ]}
                    }
                ]
            },
            "select": {
                "sequence": [
                    // If there already is a piece selected, deselect it.
                    {
                        "run_command": {
                            "command": "event entity @e[type=glc:chessmen,r=32] deselect"
                        }
                    },

                    // Tag this piece as selected.
                    {
                        "run_command": {
                            "command": "tag @s add selected"
                        }
                    },

                    // If the piece is white, add the selected_white component group to it.
                    {
                        "filters": [ {"test": "is_mark_variant", "value": 0 }],
                        "remove": { "component_groups": [ "white" ]},
                        "add": { "component_groups": [ "selected_white" ] }
                    },

                    // If the piece is black, add the selected_black component group to it.
                    {
                        "filters": [ {"test": "is_mark_variant", "value": 1 }],
                        "sequence": [
                            {
                                "remove": { "component_groups": [ "black" ]},
                                "add": { "component_groups": [ "selected_black" ] }
                            }
                        ]
                    },
                    {
                        "filters": {"test": "is_family", "value": "pawn"},
                        "sequence": [
                            {
                                "filters": {
                                    "all_of": [
                                        {"test": "has_component", "operator": "!=", "value": "minecraft:trusting"},
                                        {"test": "has_component", "operator": "!=", "value": "minecraft:genetics"}
                                    ]
                                },
                                "sequence": [
                                    // Northward - Move square
                                    {"run_command": {"command": "summon glc:square ~ ~ ~-1"}},

                                    // Northward - Despawn if the square is occupied.
                                    {"run_command": {"command": "execute @e[x=~,y=~,z=~-1,type=glc:chessmen,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},

                                    // Northwestward - Attack Square, appears if square is occupied.
                                    {"run_command": {"command": "execute @e[x=~-1,y=~,z=~-1,type=glc:chessmen,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~"}},

                                    // Northeastward - Attack Square, appears if square is occupied.
                                    {"run_command": {"command": "execute @e[x=~1,y=~,z=~-1,type=glc:chessmen,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~"}},

                                    // Northward - Initial move only, second square space.
                                    {
                                        "filters": {"test": "has_component", "operator": "!=", "value": "minecraft:giveable"},
                                        "sequence": [
                                            // Place the second square. This has a special event attached to let the square know to fire an event preparing for a possible en passant.
                                            {"run_command": {"command": "summon glc:square ~ ~ ~-2 mark_double_move"}}
                                        ]
                                    },

                                    // Remove the second square if a piece is occupying the second square space.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,z=~-2,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},

                                    // Remove the second square if a piece is occupying the space in front of the pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,z=~-1,r=0.5] ~ ~ ~ event entity @e[type=glc:square,z=~-1,r=0] force_despawn"}},

                                    // Remove the first square if a piece is occupying the space in front of the pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,z=~-1,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},

                                    // If the opposing piece has just done a double move and is beside the selected pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,x=~-1,tag=double_move,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~-1 en_passant_north"}},
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,x=~1,tag=double_move,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~-1 en_passant_north"}}                                ]
                            },
                            {
                                "filters": {
                                    "all_of": [
                                        {"test": "has_component", "value": "minecraft:trusting"},
                                        {"test": "has_component", "value": "minecraft:genetics"}
                                    ]
                                },
                                "sequence": [
                                    // Souththward - Move square
                                    {"run_command": {"command": "summon glc:square ~ ~ ~1"}},
                                
                                    // Southward - Despawn if the square is occupied.
                                    {"run_command": {"command": "execute @e[x=~,y=~,z=~1,type=glc:chessmen,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},
                                
                                    // Southwestward - Attack Square, appears if square is occupied.
                                    {"run_command": {"command": "execute @e[x=~-1,y=~,z=~1,type=glc:chessmen,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~"}},
                                
                                    // Southeastward - Attack Square, appears if square is occupied.
                                    {"run_command": {"command": "execute @e[x=~1,y=~,z=~1,type=glc:chessmen,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~"}},
                                
                                    // Southward - Initial move only, second square space.
                                    {
                                        "filters": {"test": "has_component", "operator": "!=", "value": "minecraft:giveable"},
                                        "sequence": [
                                            // Place the second square. This has a special event attached to let the square know to fire an event preparing for a possible en passant.
                                            {"run_command": {"command": "summon glc:square ~ ~ ~2 mark_double_move"}}
                                        ]
                                    },

                                    // Remove the second square if a piece is occupying the second square space.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,z=~2,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},

                                    // Remove the second square if a piece is occupying the space in front of the pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,z=~1,r=0.5] ~ ~ ~ event entity @e[type=glc:square,z=~1,r=0] force_despawn"}},

                                    // Remove the first square if a piece is occupying the space in front of the pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,z=~1,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},
                                    
                                    // If the opposing piece has just done a double move and is beside the selected pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,x=~-1,tag=double_move,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~1 en_passant_south"}},
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,x=~1,tag=double_move,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~1 en_passant_south"}}
                                ]
                            },
                            {
                                "filters": {
                                    "all_of": [
                                        {"test": "has_component", "value": "minecraft:trusting"},
                                        {"test": "has_component", "operator": "!=", "value": "minecraft:genetics"}
                                    ]
                                },
                                "sequence": [
                                    // Eastward - Move square
                                    {"run_command": {"command": "summon glc:square ~1 ~ ~"}},
                                
                                    // Eastward - Despawn if the square is occupied.
                                    {"run_command": {"command": "execute @e[x=~1,y=~,z=~,type=glc:chessmen,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},
                                
                                    // Southeastward - Attack Square, appears if square is occupied.
                                    {"run_command": {"command": "execute @e[x=~1,y=~,z=~1,type=glc:chessmen,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~"}},
                                
                                    // Northeastward - Attack Square, appears if square is occupied.
                                    {"run_command": {"command": "execute @e[x=~1,y=~,z=~-1,type=glc:chessmen,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~"}},
                                
                                    // Eastward - Initial move only, second square space.
                                    {
                                        "filters": {"test": "has_component", "operator": "!=", "value": "minecraft:giveable"},
                                        "sequence": [
                                            // Place the second square. This has a special event attached to let the square know to fire an event preparing for a possible en passant.
                                            {"run_command": {"command": "summon glc:square ~2 ~ ~ mark_double_move"}}
                                        ]
                                    },

                                    // Remove the second square if a piece is occupying the second square space.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,x=~2,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},

                                    // Remove the second square if a piece is occupying the space in front of the pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,x=~1,r=0.5] ~ ~ ~ event entity @e[type=glc:square,x=~1,r=0] force_despawn"}},

                                    // Remove the first square if a piece is occupying the space in front of the pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,x=~1,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},
                                    
                                    // If the opposing piece has just done a double move and is beside the selected pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,z=~-1,tag=double_move,r=0.5] ~ ~ ~ summon glc:square ~1 ~ ~ en_passant_east"}},
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,z=~1,tag=double_move,r=0.5] ~ ~ ~ summon glc:square ~1 ~ ~ en_passant_east"}}
                                ]
                            },
                            {
                                "filters": {
                                    "all_of": [
                                        {"test": "has_component", "operator": "!=", "value": "minecraft:trusting"},
                                        {"test": "has_component", "value": "minecraft:genetics"}
                                    ]
                                },
                                "sequence": [
                                    // Westward - Move square
                                    {"run_command": {"command": "summon glc:square ~-1 ~ ~"}},
                                
                                    // Westward - Despawn if the square is occupied.
                                    {"run_command": {"command": "execute @e[x=~-1,y=~,z=~,type=glc:chessmen,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},
                                
                                    // Southwestward - Attack Square, appears if square is occupied.
                                    {"run_command": {"command": "execute @e[x=~-1,y=~,z=~1,type=glc:chessmen,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~"}},
                                
                                    // Northwestward - Attack Square, appears if square is occupied.
                                    {"run_command": {"command": "execute @e[x=~-1,y=~,z=~-1,type=glc:chessmen,r=0.5] ~ ~ ~ summon glc:square ~ ~ ~"}},
                                
                                    // Westward - Initial move only, second square space.
                                    {
                                        "filters": {"test": "has_component", "operator": "!=", "value": "minecraft:giveable"},
                                        "sequence": [
                                            // Place the second square. This has a special event attached to let the square know to fire an event preparing for a possible en passant.
                                            {"run_command": {"command": "summon glc:square ~-2 ~ ~ mark_double_move"}}
                                        ]
                                    },

                                    // Remove the second square if a piece is occupying the second square space.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,x=~-2,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},

                                    // Remove the second square if a piece is occupying the space in front of the pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,x=~-1,r=0.5] ~ ~ ~ event entity @e[type=glc:square,x=~-1,r=0] force_despawn"}},

                                    // Remove the first square if a piece is occupying the space in front of the pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,x=~-1,r=0.5] ~ ~ ~ event entity @e[type=glc:square,r=0] force_despawn"}},
                                    
                                    // If the opposing piece has just done a double move and is beside the selected pawn.
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,z=~-1,tag=double_move,r=0.5] ~ ~ ~ summon glc:square ~-1 ~ ~ en_passant_west"}},
                                    {"run_command": {"command": "execute @e[type=glc:chessmen,z=~1,tag=double_move,r=0.5] ~ ~ ~ summon glc:square ~-1 ~ ~ en_passant_west"}}
                                ]
                            }
                        ]
                    },
                    {
                        "filters": [ {"test": "is_family", "value": "rook"} ],
                        "trigger": "trace_plus"
                    },
                    {
                        "filters": [ {"test": "is_family", "value": "knight"} ],
                        "sequence": [
                            {
                                "run_command": {"command": "function chess_trace_knight"}
                            }
                        ]
                    },
                    {
                        "filters": [ {"test": "is_family", "value": "bishop"} ],
                        "trigger": "trace_cross"
                    },
                    {
                        "filters": [ {"test": "is_family", "value": "queen"} ],
                        "sequence": [
                            {"trigger": "trace_plus"},
                            {"trigger": "trace_cross"}
                        ]
                    },
                    {
                        "filters": [ {"test": "is_family", "value": "king"} ],
                        "sequence": [
                            {
                                "run_command": {"command": "function chess_trace_king"}
                            },
                            {
                                "sequence": [
                                    // Left side castle.
                                    {
                                        "filters": {
                                            "all_of": [
                                                {"test":"has_component","operator": "!=","value": "minecraft:giveable"},
                                                {"test":"has_component","operator": "!=","value": "minecraft:can_climb"},
                                                {
                                                    "none_of": [
                                                        {"test": "has_component", "value": "minecraft:trusting"},
                                                        {"test": "has_component", "value": "minecraft:genetics"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "run_command": {"command": "summon glc:square ~-2 ~ ~ mark_castle_north_left"}
                                    },
                                    {
                                        "filters": {
                                            "all_of": [
                                                {"test":"has_component","operator": "!=","value": "minecraft:giveable"},
                                                {"test":"has_component","operator": "!=","value": "minecraft:can_climb"},
                                                {"test": "has_component", "value": "minecraft:trusting"},
                                                {"test": "has_component", "value": "minecraft:genetics"}
                                            ]
                                        },
                                        "run_command": {"command": "summon glc:square ~2 ~ ~ mark_castle_south_left"}
                                    },
                                    {
                                        "filters": {
                                            "all_of": [
                                                {"test":"has_component","operator": "!=", "value": "minecraft:giveable"},
                                                {"test":"has_component","operator": "!=", "value": "minecraft:can_climb"},
                                                {"test": "has_component", "value": "minecraft:trusting"},
                                                {"test": "has_component", "operator": "!=", "value": "minecraft:genetics"}
                                            ]
                                        },
                                        "run_command": {"command": "summon glc:square ~ ~ ~-2 mark_castle_east_left"}
                                    },
                                    {
                                        "filters": {
                                            "all_of": [
                                                {"test":"has_component","operator": "!=","value": "minecraft:giveable"},
                                                {"test":"has_component","operator": "!=","value": "minecraft:can_climb"},
                                                {"test": "has_component", "operator": "!=", "value": "minecraft:trusting"},
                                                {"test": "has_component", "value": "minecraft:genetics"}
                                            ]
                                        },
                                        "run_command": {"command": "summon glc:square ~ ~ ~2 mark_castle_west_left"}
                                    },


                                    // Right side castle here.
                                    {
                                        "filters": {
                                            "all_of": [
                                                {"test":"has_component","operator": "!=","value": "minecraft:giveable"},
                                                {"test":"has_component","operator": "!=","value": "minecraft:can_power_jump"},
                                                {
                                                    "none_of": [
                                                        {"test": "has_component", "value": "minecraft:trusting"},
                                                        {"test": "has_component", "value": "minecraft:genetics"}
                                                    ]
                                                }
                                            ]
                                        },
                                        "run_command": {"command": "summon glc:square ~2 ~ ~ mark_castle_north_right"}
                                    },
                                    {
                                        "filters": {
                                            "all_of": [
                                                {"test":"has_component","operator": "!=","value": "minecraft:giveable"},
                                                {"test":"has_component","operator": "!=","value": "minecraft:can_power_jump"},
                                                {"test": "has_component", "value": "minecraft:trusting"},
                                                {"test": "has_component", "value": "minecraft:genetics"}
                                            ]
                                        },
                                        "run_command": {"command": "summon glc:square ~-2 ~ ~ mark_castle_south_right"}
                                    },
                                    {
                                        "filters": {
                                            "all_of": [
                                                {"test":"has_component","operator": "!=","value": "minecraft:giveable"},
                                                {"test":"has_component","operator": "!=","value": "minecraft:can_power_jump"},
                                                {"test": "has_component", "value": "minecraft:trusting"},
                                                {"test": "has_component", "operator": "!=", "value": "minecraft:genetics"}
                                            ]
                                        },
                                        "run_command": {"command": "summon glc:square ~ ~ ~2 mark_castle_east_right"}
                                    },
                                    {
                                        "filters": {
                                            "all_of": [
                                                {"test":"has_component","operator": "!=","value": "minecraft:giveable"},
                                                {"test":"has_component","operator": "!=","value": "minecraft:can_power_jump"},
                                                {"test": "has_component", "operator": "!=", "value": "minecraft:trusting"},
                                                {"test": "has_component", "value": "minecraft:genetics"}
                                            ]
                                        },
                                        "run_command": {"command": "summon glc:square ~ ~ ~-2 mark_castle_west_right"}
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "trigger": "clip_board"
                    },
                    {
                        "trigger": "remove_markers"
                    }
                ]
            }
        }   
    }
}
